import { JitsiTrack } from "./JitsiTrack";

export interface JitsiConference {
  join: (password?: string) => void;
  leave: () => Promise<void>;
  myUserId: () => string;
  getLocalTracks: () => JitsiTrack[];
  addEventListener: (event: string, listener: Function) => void;
  removeEventListener: (event: string, listener: Function) => void;
  on: this["addEventListener"];
  off: this["removeEventListener"];
  sendTextMessage: (text: string) => void;
  setDisplayName: (name: string) => void;
  selectParticipant: (participantId: string) => void;
  sendCommand: (name: string, values: any) => void;
  sendCommandOnce: this["sendCommand"];
  removeCommand: (name: string) => void;
  addCommandListener: (command: string, handler: any) => void;
  removeCommandListener: (command: string) => void;
  addTrack: (track: JitsiTrack) => Promise<void>;
  removeTrack: (track: JitsiTrack) => Promise<void>;
  isDTMFSupported: () => boolean;
  getRole: () => "moderator" | "none";
  isModerator: () => boolean;
  lock: (password: string) => Promise<void>;
  unlock: () => Promise<void>;
  kickParticipant: (id: string) => void;
  setStartMutedPolicy: (policy: { video: boolean; audio: boolean }) => void;
  getStartMutedPolicy: () => { video: boolean; audio: boolean };
  isStartAudioMuted: () => boolean;
  isStartVideoMuted: () => boolean;
  sendFeedback: (overallFeedback: any, detailedFeedback: any) => void;
  setSubject: (subject: string) => void;
  sendEndpointMessage: (to: string, payload: any) => void;
  broadcastEndpointMessage: (payload: any) => void;
  pinParticipant: (participantId: string) => void;
  setReceiverVideoConstraint: (resolution: number) => void;
  setSenderVideoConstraint: (resolution: number) => void;
  isHidden: () => boolean;
}
